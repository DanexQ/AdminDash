CREATE TABLE IF NOT EXISTS projekty (
    projekt_id INT NOT NULL AUTO_INCREMENT,
    nazwa VARCHAR(50) NOT NULL,
    utworzony TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (projekt_id)
);

CREATE TABLE IF NOT EXISTS zadania (
    zadanie_id INT NOT NULL AUTO_INCREMENT,
    nazwa VARCHAR(50) NOT NULL,
    opis TEXT,
    status ENUM('do zrobienia', 'w trakcie', 'gotowe', 'zablokowane') NOT NULL,
    projekt_id INT NOT NULL,
    utworzone TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    zmodyfikowano TIMESTAMP NULL,
    PRIMARY KEY (zadanie_id),
    FOREIGN KEY (projekt_id) REFERENCES projekty(projekt_id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS uzytkownicy (
    uzytkownik_id INT NOT NULL AUTO_INCREMENT,
    imie VARCHAR(50) NOT NULL,
    nazwisko VARCHAR(50) NOT NULL,
    stanowisko VARCHAR(50) NOT NULL,
    dzial VARCHAR(50) NOT NULL,
    rola ENUM('pracownik', 'kierownik', 'admin') NOT NULL,
    email VARCHAR(100) NULL,
    haslo TEXT NULL,
    utworzony TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    nr_tel INT(9),
    kierownik_id INT NOT NULL,
    czy_aktywny BOOLEAN NOT NULL DEFAULT TRUE,
    ostatnie_logowanie TIMESTAMP NULL,
    PRIMARY KEY (uzytkownik_id),
    UNIQUE KEY unique_email (email)
);

CREATE TABLE IF NOT EXISTS komentarze (
    komentarz_id INT NOT NULL AUTO_INCREMENT,
    tresc TEXT NOT NULL,
    uzytkownik_id INT NOT NULL,
    utworzony TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    zadanie_id INT NOT NULL,
    zmodyfikowano TIMESTAMP NULL,
    PRIMARY KEY (komentarz_id),
    FOREIGN KEY (zadanie_id) REFERENCES zadania(zadanie_id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (uzytkownik_id) REFERENCES uzytkownicy(uzytkownik_id) ON UPDATE SET NULL ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS zadania_uzytkownicy (
    zadania_uzytkownicy_id INT NOT NULL AUTO_INCREMENT,
    zadania_zadanie_id INT NOT NULL,
    uzytkownicy_uzytkownik_id INT NOT NULL,
    PRIMARY KEY (zadania_uzytkownicy_id),
    FOREIGN KEY (uzytkownicy_uzytkownik_id) REFERENCES uzytkownicy(uzytkownik_id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (zadania_zadanie_id) REFERENCES zadania(zadanie_id) ON UPDATE CASCADE ON DELETE CASCADE
);
